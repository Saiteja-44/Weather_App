{"version":3,"sources":["Forecast.jsx","WeatherDisplay.jsx","Zipcode.jsx","App.jsx","index.js","assets/weather.svg"],"names":["Forecast","_ref","forecastData","title","isOpen","setIsOpen","useState","React","createElement","className","concat","onClick","toggleCollapsible","map","hour","index","key","Date","dt","toLocaleTimeString","minute","src","weather","icon","alt","description","temp","toFixed","day","toLocaleDateString","weekday","min","max","WeatherDisplay","weatherData","capitalizedDescription","current","split","word","charAt","toUpperCase","slice","join","iconUrl","setIconUrl","useEffect","iconValue","iconImageUrl","lowercaseDescription","toLowerCase","includes","Fragment","cityName","feels_like","humidity","wind_speed","hourly","daily","Zipcode","handleZipcodeSubmit","inputZipcode","setInputZipcode","isCentered","setIsCentered","isInvalidZipcode","setIsInvalidZipcode","handleSubmit","async","e","preventDefault","trim","length","test","zipResponse","axios","get","status","console","error","log","Icon","type","placeholder","value","onChange","target","onKeyDown","App","setWeatherData","apiKey","data","lat","lon","name","weatherResponse","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports","__webpack_require__","p"],"mappings":"6KA6DeA,MA3Df,SAAiBC,GAA0B,IAAzBC,aAAEA,EAAYC,MAAEA,GAAOF,EACvC,MAAOG,EAAQC,GAAaC,oBAAS,GAMrC,OACEC,IAAAC,cAAA,OAAKC,UAAS,YAAAC,OAAcN,EAAS,SAAW,IAAMO,QAL9BC,KACxBP,GAAWD,KAKTG,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,UAAKL,GACLI,IAAAC,cAAA,OAAKC,UAAU,6BACbF,IAAAC,cAAA,OAAKC,UAAU,0BAAyB,YAG3CL,GACCG,IAAAC,cAAA,OAAKC,UAAU,sBACbF,IAAAC,cAAA,OAAKC,UAAU,mBACF,oBAAVN,EACCD,EAAaW,IAAI,CAACC,EAAMC,IACtBR,IAAAC,cAAA,OAAKQ,IAAKD,EAAON,UAAU,iBACzBF,IAAAC,cAAA,OAAKC,UAAU,iBACZ,IAAIQ,KAAe,IAAVH,EAAKI,IAAWC,mBAAmB,GAAI,CAAEL,KAAM,UAAWM,OAAQ,aAE9Eb,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,OACEa,IAAG,qCAAAX,OAAuCI,EAAKQ,QAAQ,GAAGC,KAAI,QAC9DC,IAAKV,EAAKQ,QAAQ,GAAGG,eAGzBlB,IAAAC,cAAA,OAAKC,UAAU,iBAAiBK,EAAKY,KAAKC,UAAU,WAIxDzB,EAAaW,IAAI,CAACe,EAAKb,IACrBR,IAAAC,cAAA,OAAKQ,IAAKD,EAAON,UAAU,iBACzBF,IAAAC,cAAA,OAAKC,UAAU,gBACZ,IAAIQ,KAAc,IAATW,EAAIV,IAAWW,mBAAmB,QAAS,CAAEC,QAAS,UAElEvB,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,OACEa,IAAG,qCAAAX,OAAuCkB,EAAIN,QAAQ,GAAGC,KAAI,QAC7DC,IAAKI,EAAIN,QAAQ,GAAGG,eAGxBlB,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,QAAMC,UAAU,gBAAgBmB,EAAIF,KAAKK,IAAIJ,UAAU,SAAS,IAChEpB,IAAAC,cAAA,QAAMC,UAAU,gBAAgBmB,EAAIF,KAAKM,IAAIL,UAAU,gBC6C5DM,MAnFf,SAAuBhC,GAAkB,IAAjBiC,YAAEA,GAAajC,EACrC,MAAMkC,EAAmDD,EAAYE,QAAQd,QAAQ,GAAGG,YANrFY,MAAM,KACNxB,IAAIyB,GAAQA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,IACtDC,KAAK,MAKDC,EAASC,GAActC,mBAAS,IAEvCuC,oBAAU,KACR,GAAIX,EAAYE,SAAWF,EAAYE,QAAQd,QAAQ,GAAI,CACzD,MAAMwB,EAAYZ,EAAYE,QAAQd,QAAQ,GAAGC,KAC3CwB,EAAY,qCAAArC,OAAwCoC,EAAS,QACnEF,EAAWG,KAEZ,CAACb,IAeJ,MAAMc,EAAuBd,EAAYE,QAAUF,EAAYE,QAAQd,QAAQ,GAAGG,YAAYwB,cAAgB,GAE9G,OACE1C,IAAAC,cAAA,OAAKC,UAAS,GAAAC,OAfVsC,EAAqBE,SAAS,iBAAmBF,EAAqBE,SAAS,YAAcF,EAAqBE,SAAS,QACtH,eACEF,EAAqBE,SAAS,QAChC,OACEF,EAAqBE,SAAS,SAChC,QACEF,EAAqBE,SAAS,UAChC,SAEA,qBAOP3C,IAAAC,cAAA,OAAKC,UAAU,WACZyB,EAAYE,QACX7B,IAAAC,cAAAD,IAAA4C,SAAA,KACE5C,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,SAAI0B,EAAYkB,WAElB7C,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UAAK0B,EAAYE,QAAQV,KAAKC,UAAU,WAG5CpB,IAAAC,cAAA,OAAKC,UAAU,YACZkC,GACCpC,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,OAAKa,IAAKsB,EAASnB,IAAI,kBAG3BjB,IAAAC,cAAA,OAAKC,UAAU,eACbF,IAAAC,cAAA,SAAI2B,MAIV5B,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,OAAKC,UAAU,UACbF,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,KAAGC,UAAU,QAAQyB,EAAYE,QAAQiB,WAAW1B,UAAU,SAC9DpB,IAAAC,cAAA,SAAG,eAELD,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,KAAGC,UAAU,QAAQyB,EAAYE,QAAQkB,SAAS,KAClD/C,IAAAC,cAAA,SAAG,aAELD,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,KAAGC,UAAU,QAAQyB,EAAYE,QAAQmB,WAAW5B,UAAU,QAC9DpB,IAAAC,cAAA,SAAG,gBAGU,OAAhB0B,EACC3B,IAAAC,cAAAD,IAAA4C,SAAA,KACE5C,IAAAC,cAACR,EAAQ,CAACE,aAAcgC,EAAYsB,OAAOf,MAAM,EAAG,IAAKtC,MAAM,oBAC/DI,IAAAC,cAACR,EAAQ,CAACE,aAAcgC,EAAYuB,MAAOtD,MAAM,oBAEjD,OAIRI,IAAAC,cAAA,SAAG,6DCZEkD,MAtEf,SAAgBzD,GAA0B,IAAzB0D,oBAAEA,GAAqB1D,EACtC,MAAO2D,EAAcC,GAAmBvD,mBAAS,KAC1CwD,EAAYC,GAAiBzD,oBAAS,IACtC0D,EAAkBC,GAAuB3D,oBAAS,GAQnD4D,EAAeC,UAEnB,GADAC,EAAEC,iBAC0B,KAAxBT,EAAaU,OACf,GAA4B,IAAxBV,EAAaW,QAAgB,QAAQC,KAAKZ,GAC5C,IACE,MAAMa,QAAoBC,IAAMC,IAAG,kDAAAjE,OACiBkD,EAAY,WAAAlD,OAbzD,qCAgBoB,MAAvB+D,EAAYG,QACdjB,EAAoBC,GACpBG,GAAc,IAEdc,QAAQC,MAAM,aAAcL,EAAYG,QAE1C,MAAOE,GACPD,QAAQC,MAAM,SAAUA,GACxBb,GAAoB,QAGtBA,GAAoB,IAO1B,OAHApB,oBAAU,KACRgC,QAAQE,IAAIf,IACX,CAACA,IAEFzD,IAAAC,cAAA,OAAKC,UAAS,UAAAC,OAAYoD,EAAa,WAAa,KAClDvD,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,OAAKa,IAAK2D,IAAMxD,IAAI,UAAUf,UAAU,gBAE1CF,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,SACEyE,KAAK,OACLC,YAAY,iBACZC,MAAOvB,EACPwB,SA3CiBhB,IACzBP,EAAgBO,EAAEiB,OAAOF,OACzBlB,GAAoB,IA0CZqB,UAAYlB,IACI,UAAVA,EAAEpD,KACJkD,EAAaE,MAInB7D,IAAAC,cAAA,KACEC,UAAU,2BACVE,QAASuD,EACT/D,MAAM,YAGT6D,GACCzD,IAAAC,cAAA,KAAGC,UAAU,iBAAgB,2CCZxB8E,MAjDf,WACE,MAAOrD,EAAasD,GAAkBlF,mBAAS,MACzCmF,EAAS,mCA+Bf,OACElF,IAAAC,cAAA,OACEC,UAAS,OAAAC,OACPwB,EACIA,EAAYE,QAAQd,QAAQ,GAAGG,YAAYwB,cAC3C,KAGN1C,IAAAC,cAACkD,EAAO,CAACC,oBArCeQ,UAC1B,IACE,MAAMM,QAAoBC,IAAMC,IAAG,kDAAAjE,OACiBkD,EAAY,WAAAlD,OAAU+E,IAG1E,GACyB,MAAvBhB,EAAYG,QACZH,EAAYiB,KAAKC,KACjBlB,EAAYiB,KAAKE,IACjB,CACA,MAAMxC,EAAWqB,EAAYiB,KAAKG,KAC5BC,QAAwBpB,IAAMC,IAAG,uDAAAjE,OACkB+D,EAAYiB,KAAKC,IAAG,SAAAjF,OAAQ+D,EAAYiB,KAAKE,IAAG,WAAAlF,OAAU+E,EAAM,oBAG1F,MAA3BK,EAAgBlB,OAClBY,EAAe,IAAKM,EAAgBJ,KAAMtC,aAE1CyB,QAAQC,MAAM,qCAGhBD,QAAQC,MAAM,iCAEhB,MAAOA,GACPD,QAAQC,MAAM,SAAUA,OAaP,OAAhB5C,EACC3B,IAAAC,cAACyB,EAAc,CAACC,YAAaA,IAC3B,OC/CG6D,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5F,IAAAC,cAACD,IAAM6F,WAAU,KACf7F,IAAAC,cAAC+E,EAAG,+CCPRc,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ea67371a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Forecast({ forecastData, title }) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggleCollapsible = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className={`forecast ${isOpen ? 'active' : ''}`} onClick={toggleCollapsible}>\r\n      <div className=\"forecast-title\">\r\n        <h2>{title}</h2>\r\n        <div className=\"forecast-toggle-container\">\r\n          <div className=\"forecast-toggle-button\">▼</div>\r\n        </div>\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"forecast-container\">\r\n          <div className=\"forecast-scroll\">\r\n            {title === 'Hourly Forecast' ? (\r\n              forecastData.map((hour, index) => (\r\n                <div key={index} className=\"forecast-item\">\r\n                  <div className=\"forecast-time\">\r\n                    {new Date(hour.dt * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n                  </div>\r\n                  <div className=\"forecast-icon\">\r\n                    <img\r\n                      src={`https://openweathermap.org/img/wn/${hour.weather[0].icon}.png`}\r\n                      alt={hour.weather[0].description}\r\n                    />\r\n                  </div>\r\n                  <div className=\"forecast-temp\">{hour.temp.toFixed()}°F</div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              forecastData.map((day, index) => (\r\n                <div key={index} className=\"forecast-item\">\r\n                  <div className=\"forecast-day\">\r\n                    {new Date(day.dt * 1000).toLocaleDateString('en-US', { weekday: 'long' })}\r\n                  </div>\r\n                  <div className=\"forecast-icon\">\r\n                    <img\r\n                      src={`https://openweathermap.org/img/wn/${day.weather[0].icon}.png`}\r\n                      alt={day.weather[0].description}\r\n                    />\r\n                  </div>\r\n                  <div className=\"forecast-min-max\">\r\n                    <span className=\"forecast-min\">{day.temp.min.toFixed()}°F</span>/\r\n                    <span className=\"forecast-max\">{day.temp.max.toFixed()}°F</span>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Forecast;\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport './style.css';\r\nimport Forecast from './Forecast';\r\n\r\nfunction capitalizeWordsAfterSpace(string) {\r\n  return string\r\n    .split(' ')\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(' ');\r\n}\r\n\r\nfunction WeatherDisplay({ weatherData }) {\r\n  const capitalizedDescription = capitalizeWordsAfterSpace(weatherData.current.weather[0].description);\r\n  const [iconUrl, setIconUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (weatherData.current && weatherData.current.weather[0]) {\r\n      const iconValue = weatherData.current.weather[0].icon;\r\n      const iconImageUrl = `https://openweathermap.org/img/wn/${iconValue}.png`;\r\n      setIconUrl(iconImageUrl);\r\n    }\r\n  }, [weatherData]);\r\n\r\n  function getClassForWeatherDescription(description) {\r\n    if (lowercaseDescription.includes(\"thunderstorm\") || lowercaseDescription.includes(\"drizzle\") || lowercaseDescription.includes(\"rain\")) {\r\n      return \"thunderstorm\";\r\n    } else if (lowercaseDescription.includes(\"snow\")) {\r\n      return \"snow\";\r\n    } else if (lowercaseDescription.includes(\"clear\")) {\r\n      return \"clear\";\r\n    } else if (lowercaseDescription.includes(\"clouds\")) {\r\n      return \"clouds\";\r\n    } else {\r\n      return \"other-conditions\";\r\n    }\r\n  }\r\n  const lowercaseDescription = weatherData.current ? weatherData.current.weather[0].description.toLowerCase() : '';\r\n\r\n  return (\r\n    <div className={`${getClassForWeatherDescription(lowercaseDescription)}`}>\r\n      <div className=\"weather\">\r\n        {weatherData.current ? (\r\n          <>\r\n            <div className=\"top\">\r\n              <div className=\"topleft\">\r\n                <div className=\"location\">\r\n                  <p>{weatherData.cityName}</p>\r\n                </div>\r\n                <div className=\"temp\">\r\n                  <h1>{weatherData.current.temp.toFixed()}°F</h1>\r\n                </div>\r\n              </div>\r\n              <div className=\"topright\">\r\n                {iconUrl && (\r\n                  <div className=\"icon\">\r\n                    <img src={iconUrl} alt=\"Weather Icon\" />\r\n                  </div>\r\n                )}\r\n                <div className=\"description\">\r\n                  <p>{capitalizedDescription}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"down-container\">\r\n              <div className=\"bottom\">\r\n                <div className=\"feels\">\r\n                  <p className=\"bold\">{weatherData.current.feels_like.toFixed()}°F</p>\r\n                  <p>Feels Like</p>\r\n                </div>\r\n                <div className=\"humidity\">\r\n                  <p className=\"bold\">{weatherData.current.humidity}%</p>\r\n                  <p>Humidity</p>\r\n                </div>\r\n                <div className=\"wind\">\r\n                  <p className=\"bold\">{weatherData.current.wind_speed.toFixed()} MPH</p>\r\n                  <p>Wind Speed</p>\r\n                </div>\r\n              </div>\r\n              {weatherData !== null ? (\r\n                <>\r\n                  <Forecast forecastData={weatherData.hourly.slice(0, 15)} title=\"Hourly Forecast\" />\r\n                  <Forecast forecastData={weatherData.daily} title=\"Daily Forecast\" />\r\n                </>\r\n              ) : null}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <p>Please enter a valid ZIP code.</p>\r\n        )}\r\n      </div>     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherDisplay;\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport Icon from \"./assets/weather.svg\";\r\nimport axios from \"axios\";\r\n\r\nfunction Zipcode({ handleZipcodeSubmit }) {\r\n  const [inputZipcode, setInputZipcode] = useState(\"\");\r\n  const [isCentered, setIsCentered] = useState(true);\r\n  const [isInvalidZipcode, setIsInvalidZipcode] = useState(false);\r\n  const apiKey = \"938cc58fae1c1a679c22bbbd14c27c3b\";\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputZipcode(e.target.value);\r\n    setIsInvalidZipcode(false);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (inputZipcode.trim() !== \"\") {\r\n      if (inputZipcode.length === 5 && /^\\d+$/.test(inputZipcode)) {\r\n        try {\r\n          const zipResponse = await axios.get(\r\n            `https://api.openweathermap.org/geo/1.0/zip?zip=${inputZipcode}&appid=${apiKey}`\r\n          );\r\n\r\n          if (zipResponse.status === 200) {\r\n            handleZipcodeSubmit(inputZipcode);\r\n            setIsCentered(false);\r\n          } else {\r\n            console.error(\"API Error:\", zipResponse.status);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error:\", error);\r\n          setIsInvalidZipcode(true);\r\n        }\r\n      } else {\r\n        setIsInvalidZipcode(true);\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(isInvalidZipcode);\r\n  }, [isInvalidZipcode]);\r\n  return (\r\n    <div className={`search ${isCentered ? \"centered\" : \"\"}`}>\r\n      <div className=\"search-container\">\r\n        <div className=\"imagecontainer\">\r\n          <img src={Icon} alt=\"Landing\" className=\"landingimg\" />\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter ZIP code\"\r\n            value={inputZipcode}\r\n            onChange={handleInputChange}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                handleSubmit(e);\r\n              }\r\n            }}\r\n          />\r\n          <i\r\n            className=\"fa fa-search search-icon\"\r\n            onClick={handleSubmit}\r\n            title=\"Search\"\r\n          ></i>\r\n        </div>\r\n        {isInvalidZipcode && (\r\n          <p className=\"error-message\">Please enter a valid ZIP code.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Zipcode;\r\n","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\nimport WeatherDisplay from \"./WeatherDisplay\";\r\nimport Zipcode from \"./Zipcode\";\r\nimport axios from \"axios\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\n\r\nfunction App() {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const apiKey = \"938cc58fae1c1a679c22bbbd14c27c3b\";\r\n\r\n  const handleZipcodeSubmit = async (inputZipcode) => {\r\n    try {\r\n      const zipResponse = await axios.get(\r\n        `https://api.openweathermap.org/geo/1.0/zip?zip=${inputZipcode}&appid=${apiKey}`\r\n      );\r\n\r\n      if (\r\n        zipResponse.status === 200 &&\r\n        zipResponse.data.lat &&\r\n        zipResponse.data.lon\r\n      ) {\r\n        const cityName = zipResponse.data.name;\r\n        const weatherResponse = await axios.get(\r\n          `https://api.openweathermap.org/data/3.0/onecall?lat=${zipResponse.data.lat}&lon=${zipResponse.data.lon}&appid=${apiKey}&units=imperial`\r\n        );\r\n\r\n        if (weatherResponse.status === 200) {\r\n          setWeatherData({ ...weatherResponse.data, cityName });\r\n        } else {\r\n          console.error(\"Failed to fetch weather data\");\r\n        }\r\n      } else {\r\n        console.error(\"Failed to fetch ZIP code data\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`app ${\r\n        weatherData\r\n          ? weatherData.current.weather[0].description.toLowerCase()\r\n          : \"\"\r\n      }`}\r\n    >\r\n      <Zipcode handleZipcodeSubmit={handleZipcodeSubmit} />\r\n      {weatherData !== null ? (\r\n        <WeatherDisplay weatherData={weatherData} />\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.jsx\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","module.exports = __webpack_public_path__ + \"static/media/weather.4d35ad7e.svg\";"],"sourceRoot":""}